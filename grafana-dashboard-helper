#!/usr/bin/perl

#### TODO: update dashboards and indexes with removed measurements and field keys .
#### TODO: add cron subcommand and differential update.
#### TODO: add panel size configuration.

use Encode;
use English;
use IO::Handle;
use URI::Escape;
use URI::Query;
use HTTP::Daemon;
use HTTP::Status;
use LWP::UserAgent;
use JSON::XS;
use Template;
use Template::Context;
use strict;

our $NAME           = 'grafana-dashboard-helper';
our $GDHCONFFILE    = "/etc/grafana-dashboard-helper/$NAME.conf";
our $LOGFILE        = "/var/log/grafana-dashboard-helper/$NAME.log";
our $EXECDIR        = "/usr/lib/grafana-dashboard-helper";
our $STATUSDIR      = "/var/lib/grafana-dashboard-helper";
our $DASHBOARDPLUGINDIR = "/etc/grafana-dashboard-helper/dashboard-plugins";

####
#our $JSONCODEC = JSON::XS->new->utf8->canonical;
our $JSONCODEC = JSON::XS->new->utf8->canonical->relaxed( 1 )->pretty;

our $LOGFH = *STDERR;
our $DEBUG = 0;

sub setlogfile ($) {
	my ($logfile) = @_;
	if( $logfile =~ m"^\*" ){
		$LOGFH = $logfile;
		return 1;
	}
	open $LOGFH, '>>', $logfile or do {
		die "$logfile: cannot open, stopped";
	};
	$LOGFH->autoflush;
	return 1;
}

sub debuglog ($;@) {
	return unless $DEBUG;
	my ($format, @args) = @_;
	my ($sec,$min,$hour,$day,$mon,$year) = localtime time;
	my $t = sprintf '%04d-%02d-%02d_%02d:%02d:%02d', $year+1900, $mon+1, $day, $hour, $min, $sec;
	my $s = sprintf "$t [DEBUG] $format\n", @args;
	print $LOGFH encode_utf8($s);
}

sub errorlog ($;@) {
	my ($format, @args) = @_;
	my ($sec,$min,$hour,$day,$mon,$year) = localtime time;
	my $t = sprintf '%04d-%02d-%02d_%02d:%02d:%02d', $year+1900, $mon+1, $day, $hour, $min, $sec;
	my $s = sprintf "$t [ERROR] $format\n", @args;
	print $LOGFH encode_utf8($s);
}

sub accesslog ($;@) {
	my ($format, @args) = @_;
	my ($sec,$min,$hour,$day,$mon,$year) = localtime time;
	my $t = sprintf '%04d-%02d-%02d_%02d:%02d:%02d', $year+1900, $mon+1, $day, $hour, $min, $sec;
	printf $LOGFH "$t [ACCESS] $format\n", @args;
}

sub var2ltsv ( \% ){
	my ($var) = @_;
	my @ltsv;
	push @ltsv, "host_service:".$var->{host_service} if defined $var->{host_service};
	foreach my $k ( sort {$a cmp $b} keys %$var ){
		next if $k eq 'host_service';
                push @ltsv, "$k:".$var->{$k};
	}
	return join "\t", @ltsv;
}

sub ltsv2var ( $ ){
	my ($ltsv) = @_;
	my %var;
	foreach my $kv ( split m"\t", $ltsv ){
		$kv =~ m"^([-./\[\]\w]+):(.*)$" or do {
			next;
		};
		my $k = $1;
		my $v = $2;
		$var{$k} = $v;
	}
	return %var;
}

sub system_or_die ($) {
	my ($cmd) = @_;
	my ( $cmdname ) = split m"\s+", $cmd;
	my $r = system $cmd;
	if    ($? == -1){
		die "$cmdname: failed to execute: $!, stopped";
	}elsif($? & 127){
		my $signal_num = ($? & 127);
		my $with_or_without = ($? & 128) ? 'with' : 'without';
		die "$cmdname: child died with signal $signal_num, $with_or_without coredump, stoped";
	}
	my $rc = $? >> 8;
	if( $rc != 0 ){
		die "$cmdname: child exit with rc=$rc, stopped";
	}
	return 1;
}

####

sub get_named_placeholders ($) {
	my ($string) = @_;
	my %placeholders;
	$string =~ s{
		<(\w+)>
	}{
		$placeholders{$1} = 1;
		"";
	}egx;
	return sort keys %placeholders;
}

sub expand_named_placeholders ($%) {
	my ($string, %params) = @_;
	$string =~ s{
		(?: < (\w+) > )
	}{
		if   ( $1 ne '' ){ $params{$1}; }
	}egx;
	return $string;
}

####

sub read_gdh_conf (;%) {
	my (%option) = @_;

	my $filename = $GDHCONFFILE;
	my %conf = (
		'DEBUG'              => undef,
		'LOGFILE'            => $LOGFILE,
		'EXECDIR'            => $EXECDIR,
		'STATUSDIR'          => $STATUSDIR,
		'DASHBOARDPLUGINDIR' => $DASHBOARDPLUGINDIR,

		'GDHLISTENADDR' => 'localhost',
		'GDHLISTENPORT' => 46849,
		'GDHURL'        => 'http://localhost:46849/',
		'GDHGRAFANAURL' => 'http://localhost:3000/',

		'GRAFANAURL'         => 'http://localhost:3000/',
		'GRAFANATOKEN'       => 'XXXXSECRETXXXX',
		'GRAFANADATASOURCE'  => 'influxdb',
		'GRAFANABUCKET'      => 'naemon_bucket',
		'GRAFANAORGID'       => 2,

		'INFLUXDBURL'	     => 'http://localhost:8086/',
		'INFLUXDBORG'	     => 'naemon_org',
		'INFLUXDBBUCKET'     => 'naemon_bucket',
		'INFLUXDBTOKEN'      => 'XXXXSECRETXXXX',

	);

	open my $h, '<', $filename or do {
		die "$filename: cannot open, because of $OS_ERROR, stopped";
	};
	while (<$h>) {
		next if m"^\s*(#|$)";
		unless( m"^(\w+)=(.*)$" ){
			die "$filename:$.: illegal format, stopped";
		}
		my $k = $1;
		my $v = $2;
		if   ( exists $conf{$k} ) { $conf{$k} = $v; }
		elsif( $k =~ m"^PLUGIN_" ){ $conf{$k} = $v; }
		else{ errorlog "$filename:$.: unknown parameter."; }
	}
	close $h or do {
		die "$filename: cannot close, because of $OS_ERROR, stopped";
	};

	# overwrite by commandline options
	while( my ($k, $v) = each %option ){
		next unless defined $v;
		$conf{$k} = $v;
	}

	# set global variables
	$DEBUG     = $conf{DEBUG}     if defined $conf{DEBUG};
	$LOGFILE   = $conf{LOGFILE}   if $conf{LOGFILE} ne "";
	$EXECDIR   = $conf{EXECDIR}   if $conf{EXECDIR} ne "";
	$STATUSDIR = $conf{STATUSDIR} if $conf{STATUSDIR} ne "";
	$DASHBOARDPLUGINDIR = $conf{DASHBOARDPLUGINDIR} if $conf{DASHBOARDPLUGINDIR} ne "";

	setlogfile $LOGFILE if defined $LOGFILE;

	# add "/" to the tail of each urls
	foreach my $i ( 'GDHURL', 'GDHGRAFANAURL', 'GRAFANAURL', 'INFLUXDBURL' ){
		$conf{$i} .= "/" unless $conf{$i} =~ m"/$";
	}

	return \%conf;
}

sub write_as_json ($$) {
	my ($filename, $obj) = @_;
	open my $h, '>', $filename or do {
		die "cannot open $filename: $OS_ERROR, stopped";
	};
	print $h $JSONCODEC->encode($obj), "\n";
	close $h or do {
		die "close failed for $filename: $OS_ERROR, stopped";
	};
	return;
}

sub read_as_json ($) {
	my ($filename) = @_;
	open my $h, '<', $filename or do {
		return undef;
	};
	my $c = join "", <$h>;
	close $h or do {
		die "close failed for $filename: $OS_ERROR, stopped";
	};
	my $obj = eval { $JSONCODEC->decode($c); };
	return undef if $@;
	return $obj;
}

sub get_mtime ($) {
	my ($file) = @_;

	my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,$blksize,$blocks) = stat $file;
	return $mtime;
}

sub update_part_of_index ($$) {
	my ($index, $part_name) = @_;

	my $old_mtime = $$index{"mtime_of_$part_name"};
	my $mtime     = get_mtime "$STATUSDIR/index/$part_name.json";
	if( $old_mtime < $mtime ){
		open my $h, "<", "$STATUSDIR/index/$part_name.json" or do {
			die "$STATUSDIR/index/$part_name.json: cannot open, stopped";
		};
		my $json = join "", <$h>;
		close $h;
		my $obj = eval { $JSONCODEC->decode($json); };
		$$index{"$part_name"}          = $obj;
		$$index{"mtime_of_$part_name"} = $mtime;
	}
}

sub search_panels_by_fieldkey_name ($$) {
	my ($index, $fieldkey_name) = @_;
	update_part_of_index $index, "search_panels_by_fieldkey_name";
	my $result = $$index{search_panels_by_fieldkey_name}{$fieldkey_name};
	return undef unless defined $result;
	return [ sort keys %$result ];
}

sub search_dashboards_by_fieldkey_name ($$) {
	my ($index, $fieldkey_name) = @_;
	update_part_of_index $index, "search_dashboards_by_fieldkey_name";
	my $result = $$index{search_dashboards_by_fieldkey_name}{$fieldkey_name};
	return undef unless defined $result;
	return [ sort keys %$result ];
}

sub search_panels_by_series_name ($$) {
	my ($index, $series_name) = @_;
	update_part_of_index $index, "search_panels_by_series_name";
	my $result = $$index{search_panels_by_series_name}{$series_name};
	return undef unless defined $result;
	return [ sort keys %$result ];
}

sub search_dashboards_by_series_name ($$) {
	my ($index, $series_name) = @_;
	update_part_of_index $index, "search_dashboards_by_series_name";
	my $result = $$index{search_dashboards_by_series_name}{$series_name};
	return undef unless defined $result;
	return [ sort keys %$result ];
}

sub get_dashboard ($$$) {
	my ($conf, $index, $dashboard_name) = @_;
	update_part_of_index $index, "dashboards";
	my $result = $$index{dashboards}{$dashboard_name};
	return undef unless defined $result;

	my %r = %$result;
	$r{url} = sprintf "%sd/%s/%s",
		$$conf{GDHGRAFANAURL}, $r{uid}, $r{slug};

	return \%r;
}

sub get_panel ($$$) {
	my ($conf, $index, $panel_name) = @_;
	update_part_of_index $index, "panels";
	my $result = $$index{panels}{$panel_name};
	return undef unless defined $result;

	my %r = %$result;
	my ($dashboard_name, $panel_serial) = split m"\s+", $r{panel_name};
	$r{url} = sprintf "%srender/d-solo/%s/%s?panelId=%d&width=600&height=200&timeout=5&orgId=2",
		$$conf{GRAFANAURL}, $r{uid}, $r{slug}, $panel_serial;

	return \%r;
}

########
########
########

#### Web APIs

sub action_ping ($$) {
	my ($conn, $req) = @_;

	my $res = HTTP::Response->new;
	$res->code(200);
	$res->header('Content-Type' => 'text/plain');
	$res->content("OK\n");
	$conn->send_response($res);
}

sub action_jump_to_dashboard_by_fieldkey_name ($$$$) {
	my ($conf, $conn, $req, $index) = @_;
	my $query = URI::Query->new( $req->uri->query );
	my %query = $query->hash;

	my $result = search_dashboards_by_fieldkey_name $index, $query{q};
	unless( defined $result ){
		$conn->send_error(RC_NOT_FOUND);
		return;
	}

	my $info = get_dashboard $conf, $index, $$result[0];

	my $res = HTTP::Response->new;
	$res->code(307);
	$res->header('Location' => $$info{url});
	$conn->send_response($res);
}
sub action_jump_to_dashboard_by_series_name ($$$$) {
	my ($conf, $conn, $req, $index) = @_;
	my $query = URI::Query->new( $req->uri->query );
	my %query = $query->hash;

	my $result = search_dashboards_by_series_name $index, $query{q};
	unless( defined $result ){
		$conn->send_error(RC_NOT_FOUND);
		return;
	}

	my $info = get_dashboard $conf, $index, $$result[0];

	my $res = HTTP::Response->new;
	$res->code(307);
	$res->header('Location' => $$info{url});
	$conn->send_response($res);
}
sub action_jump_to_panel_by_fieldkey_name ($$$$) {
	my ($conf, $conn, $req, $index) = @_;
	my $query = URI::Query->new( $req->uri->query );
	my %query = $query->hash;

	my $result = search_panels_by_fieldkey_name $index, $query{q};
	unless( defined $result ){
		$conn->send_error(RC_NOT_FOUND);
		return;
	}

	my $info = get_panel $conf, $index, $$result[0];

	my $res = HTTP::Response->new;
	$res->code(307);
	$res->header('Location' => $$info{url});
	$conn->send_response($res);
}
sub action_jump_to_panel_by_series_name ($$$$) {
	my ($conf, $conn, $req, $index) = @_;
	my $query = URI::Query->new( $req->uri->query );
	my %query = $query->hash;

	my $result = search_panels_by_series_name $index, $query{q};
	unless( defined $result ){
		$conn->send_error(RC_NOT_FOUND);
		return;
	}

	my $info = get_panel $conf, $index, $$result[0];

	my $res = HTTP::Response->new;
	$res->code(307);
	$res->header('Location' => $$info{url});
	$conn->send_response($res);
}
sub action_search_dashboards_by_fieldkey_name ($$$$) {
	my ($conf, $conn, $req, $index) = @_;
	my $query = URI::Query->new( $req->uri->query );
	my %query = $query->hash;

	my $result = search_dashboards_by_fieldkey_name $index, $query{q};
	unless( defined $result ){
		$conn->send_error(RC_NOT_FOUND);
		return;
	}

	my @result;
	foreach my $dashboard_name ( @$result ){
		my $info = get_dashboard $conf, $index, $dashboard_name;
		push @result, $info;
	}
	my $json = eval { $JSONCODEC->encode(\@result); };

	my $res = HTTP::Response->new;
	$res->code(200);
	$res->header('Content-Type' => 'text/javascript');
	$res->content($json);
	$conn->send_response($res);
	return;
}
sub action_search_dashboards_by_series_name  ($$$$) {
	my ($conf, $conn, $req, $index) = @_;
	my $query = URI::Query->new( $req->uri->query );
	my %query = $query->hash;

	my $result = search_dashboards_by_series_name $index, $query{q};
	unless( defined $result ){
		$conn->send_error(RC_NOT_FOUND);
		return;
	}

	my @result;
	foreach my $dashboard_name ( @$result ){
		my $info = get_dashboard $conf, $index, $dashboard_name;
		push @result, $info;
	}
	my $json = eval { $JSONCODEC->encode(\@result); };

	my $res = HTTP::Response->new;
	$res->code(200);
	$res->header('Content-Type' => 'text/javascript');
	$res->content($json);
	$conn->send_response($res);
	return;
}

sub action_search_panels_by_fieldkey_name ($$$$) {
	my ($conf, $conn, $req, $index) = @_;
	my $query = URI::Query->new( $req->uri->query );
	my %query = $query->hash;

	my $result = search_panels_by_fieldkey_name $index, $query{q};
	unless( defined $result ){
		$conn->send_error(RC_NOT_FOUND);
		return;
	}

	my @result;
	foreach my $panel_name ( @$result ){
		my $info = get_panel $conf, $index, $panel_name;
		push @result, $info;
	}
	my $json = eval { $JSONCODEC->encode(\@result); };

	my $res = HTTP::Response->new;
	$res->code(200);
	$res->header('Content-Type' => 'text/javascript');
	$res->content($json);
	$conn->send_response($res);
	return;
}

sub action_search_panels_by_series_name ($$$$) {
	my ($conf, $conn, $req, $index) = @_;
	my $query = URI::Query->new( $req->uri->query );
	my %query = $query->hash;

	my $result = search_panels_by_series_name $index, $query{q};
	unless( defined $result ){
		$conn->send_error(RC_NOT_FOUND);
		return;
	}

	my @result;
	foreach my $panel_name ( @$result ){
		my $info = get_panel $conf, $index, $panel_name;
		push @result, $info;
	}
	my $json = eval { $JSONCODEC->encode(\@result); };

	my $res = HTTP::Response->new;
	$res->code(200);
	$res->header('Content-Type' => 'text/javascript');
	$res->content($json);
	$conn->send_response($res);
	return;
}

#### Sub Commands
sub cmd_cron ($) {
	my ($conf) = @_;

	while( my ($k, $v) = each %$conf ){
		$ENV{$k} = $v;
	}

	debuglog "cron: getting the series from influxdb...";
	system_or_die "$EXECDIR/get_series_from_influxdb";
	debuglog "cron: updating the unused series...";
	system_or_die "$EXECDIR/cleanup_panelblocks_older_than_plugins";
	debuglog "cron: cleanup the panelblocks older than plugins which generated it...";
	system_or_die "$EXECDIR/update_unused_series";
	opendir my $h, $DASHBOARDPLUGINDIR or do {
		die "$DASHBOARDPLUGINDIR: cannot open, stopped";
	};
	foreach my $e ( sort readdir $h ){
		next if $e =~ m"^\.";
		debuglog "cron: executing plugin $e...";
		system_or_die "$DASHBOARDPLUGINDIR/$e $STATUSDIR/unused_series $STATUSDIR/generated_dashboard";
		debuglog "cron: updating the unused series...";
		system_or_die "$EXECDIR/update_unused_series";
	}
	debuglog "cron: validating the dashboards...";
	system_or_die "$EXECDIR/validate_dashboard";
	debuglog "cron: preparing the dashboards...";
	system_or_die "$EXECDIR/prepare_dashboard";
	debuglog "cron: uploading the dashboards...";
	system_or_die "$EXECDIR/upload_dashboard_to_grafana";
	debuglog "cron: generating the index...";
	system_or_die "$EXECDIR/generate_index";
	debuglog "cron: done.";
	return 1;
}

sub cmd_daemon ($) {
	my ($conf) = @_;

	$0 = $NAME;
	my $d = HTTP::Daemon->new(
		'Reuse' => 1,
		'LocalAddr' => $$conf{GDHLISTENADDR},
		'LocalPort' => $$conf{GDHLISTENPORT},
	) or do {
		die sprintf 'cannot listen %s:%d: %s, stopped', $$conf{GDHLISTENADDR}, $$conf{GDHLISTENPORT}, $OS_ERROR;
	};

	my $index = {};
	my $running = 1;

	$SIG{TERM} = sub {
		$running = undef;
		$d->shutdown(SHUT_RDWR);
	};
	$SIG{HUP} = sub {
		setlogfile $LOGFILE if defined $LOGFILE;
	};

	while ( $running ) {
		my $conn = $d->accept;
		next unless $conn;
		my $req = $conn->get_request;
		next unless $req;
		my $method = $req->method;
		my $path = uri_unescape $req->uri->path;
		accesslog 'req: method=%s path=%s', $method, $path;
		if    ($method eq 'GET' && $path eq "/ping" ){
			action_ping $conn, $req;
		}elsif($method eq 'GET' && $path eq "/jump_to_dashboard_by_fieldkey_name.html" ){
			action_jump_to_dashboard_by_fieldkey_name $conf, $conn, $req, $index;
		}elsif($method eq 'GET' && $path eq "/jump_to_dashboard_by_series_name.html" ){
			action_jump_to_dashboard_by_series_name   $conf, $conn, $req, $index;
		}elsif($method eq 'GET' && $path eq "/jump_to_panel_by_fieldkey_name.png" ){
			action_jump_to_panel_by_fieldkey_name     $conf, $conn, $req, $index;
		}elsif($method eq 'GET' && $path eq "/jump_to_panel_by_series_name.png" ){
			action_jump_to_panel_by_series_name       $conf, $conn, $req, $index;
		}elsif($method eq 'GET' && $path eq "/search_dashboards_by_fieldkey_name.json" ){
			action_search_dashboards_by_fieldkey_name $conf, $conn, $req, $index;
		}elsif($method eq 'GET' && $path eq "/search_dashboards_by_series_name.json" ){
			action_search_dashboards_by_series_name   $conf, $conn, $req, $index;
		}elsif($method eq 'GET' && $path eq "/search_panels_by_fieldkey_name.json" ){
			action_search_panels_by_fieldkey_name     $conf, $conn, $req, $index;
		}elsif($method eq 'GET' && $path eq "/search_panels_by_series_name.json" ){
			action_search_panels_by_series_name       $conf, $conn, $req, $index;
		}else{
			$conn->send_error(RC_FORBIDDEN);
		}
		$conn->close;
		undef $conn;
	}
}

####
if    ( $ARGV[0] eq "daemon" ){
	use Getopt::Long 'GetOptionsFromArray';
	my %option = (
		DEBUG     => undef,
		LOGFILE   => undef,
		STATUSDIR => undef,
		GDHLISTENADDR => undef,
		GDHLISTENPORT => undef,
	);
	my $ok = GetOptionsFromArray( [@ARGV[1..$#ARGV]],
		"conffile|c=s"  => sub { $GDHCONFFILE = $_[1]; },

		# command-line options overwrite setting file.
		"verbose|v"     => sub { $option{DEBUG} = 1; $DEBUG = 1; $LOGFILE = *STDERR; setlogfile *STDERR; },
		"logfile|l=s"   => sub { $option{LOGFILE}   = $_[1]; $LOGFILE = $_[1]; setlogfile $_[1]; },
		"statusdir|s=s" => sub { $option{STATUSDIR} = $_[1]; },
		"listen-addr|s=s" => sub { $option{GDHLISTENADDR} = $_[1]; },
		"listen-port|i=s" => sub { $option{GDHLISTENPORT} = $_[1]; },
	);
	unless( $ok ){
		print "specified invalid option(s).\n";
		exit 2;
	}
	my $conf = read_gdh_conf %option;
	cmd_daemon $conf;
	exit 0;

}elsif( $ARGV[0] eq "cron" ){
	use Getopt::Long 'GetOptionsFromArray';
	my %option = (
		DEBUG     => undef,
		LOGFILE   => undef,
		EXECDIR   => undef,
		STATUSDIR => undef,
		DASHBOARDPLUGINDIR => undef,
	);
	my $ok = GetOptionsFromArray( [@ARGV[1..$#ARGV]],
		"conffile|c=s"  => sub { $GDHCONFFILE = $_[1]; },

		# command-line options overwrite setting file.
		"verbose|v"     => sub { $option{DEBUG} = 1; $DEBUG = 1; $LOGFILE = *STDERR; setlogfile *STDERR; },
		"logfile|l=s"   => sub { $option{LOGFILE}   = $_[1]; $LOGFILE = $_[1]; setlogfile $_[1]; },
		"execdir|e=s"   => sub { $option{EXECDIR}   = $_[1]; },
		"statusdir|s=s" => sub { $option{STATUSDIR} = $_[1]; },
		"dashboard-plugins-dir|p=s" => sub { $option{DASHBOARDPLUGINDIR} = $_[1]; },
	);
	unless( $ok ){
		print "specified invalid option(s).\n";
		exit 2;
	}
	my $conf = read_gdh_conf %option;
	cmd_cron $conf;
	exit 0;

}else{
	print "usage: % $0 {daemon|cron}\n";
	print "\n";
	print "     OPTIONS    --verbose\n";
	print "                --dry-run\n";
	print "                --refresh\n";
	print "\n";
	exit 0;
}

####
=pod

=encoding utf8

=head1 NAME

grafana-dashboard-helper

=head1 SYNOPSIS

grafana-dashboard-helper

=head1 DESCRIPTION

grafana-dashboard-helper generates Grafana panel JSONP for scripted
dashboard from InfluxDB tags and series.

This helper works as HTTP daemon. This helper is requested with hostname
and servicedesc, and responses JSONP.

=head1 OPTIONS

=over 8

Nothing to do.

=back

=head1 FILES

=over 8

=item F</etc/influxdb/grafana-dashboard-helper.conf>

=item F</etc/influxdb/grafana-dashboard-helper.dashboardrule>

=item F</etc/influxdb/grafana-dashboard-helper.template/*.tt>

=item F</etc/influxdb/grafana-dashboard-helper.templaterule>

=back

=head1 AUTHOR

SASAJIMA Toshihiro

=head1 SEE ALSO

L<grafana-dashboard-helper.conf(5)>




