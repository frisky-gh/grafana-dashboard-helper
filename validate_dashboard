#!/usr/bin/perl

use strict;
use JSON::XS;
use File::Path "rmtree";

our $BASEDIR = $ENV{GDHSTATUSDIR} // "/var/lib/grafana-dashboard-helper";

our $INPUT_DIR  = "$BASEDIR/generated_dashboard";
our $OUTPUT_DIR = "$BASEDIR/validated_dashboard";

my $codec = JSON::XS->new->utf8->canonical->relaxed( 1 )->pretty;

sub write_if_changed ($$) {
	my ($file, $content) = @_;

	if( open my $h, "<", $file ){
		my $old_content = join '', <$h>;
		return undef if $content eq $old_content;
	}

	open my $h, ">", $file or do {
		die "$file: cannot open, stopped";
	};
	print $h $content;
	close $h;
	return 1;
}

sub get_mtime_of_dir ($) {
	my ($dir) = @_;

	my $result_mtime;
	opendir my $h, $dir or return undef;
	while( my $e = readdir $h ){
		next if $e =~ m"^\.";
		my ($dev,$ino,$mode,$nlink,$uid,$gid,$rdev,$size,$atime,$mtime,$ctime,$blksize,$blocks) = stat
			"$dir/$e";
		$result_mtime = $mtime if $result_mtime < $mtime;
	}
	close $h;
	return $result_mtime;
}

sub calculate_height_and_serial ($$@) {
	my ($panel_abs_y, $panel_lastserial, @panels) = @_;

	my $panelblock_height = 0;
	my $panelblock_lastserial = $panel_lastserial;
	my $panelblock_serials;
	foreach my $p ( @panels ){
		next unless defined $$p{type};
		next unless defined $$p{title};

		$panelblock_lastserial++;
		$$p{id} = $panelblock_lastserial + 0;
		my $title = $$p{title};
		$panelblock_serials .= "$panelblock_lastserial\t$title\n" if $$p{type} eq "timeseries";

		if( defined $$p{gridPos} ){
			$$p{gridPos}{y} += $panel_abs_y;
			$panelblock_height += $$p{gridPos}{h};
		}

		if( defined $$p{panels} ){
			my ($height, $lastserial, $serials) = calculate_height_and_serial(
				$panel_abs_y, $panelblock_lastserial, @{ $$p{panels} }
			);
			$panelblock_height     += $height;
			$panelblock_lastserial  = $lastserial;
			$panelblock_serials    .= $serials;
		}
	}
	return $panelblock_height, $panelblock_lastserial, $panelblock_serials;
}

####

opendir my $h, $INPUT_DIR or do {
	die "$INPUT_DIR: cannot open, stopped";
};
foreach my $dashboardname ( sort readdir $h ){
	next if $dashboardname =~ m"^\.";
	next unless -d "$INPUT_DIR/$dashboardname";
	my $panel_serial = 0;
	my $panel_abs_y  = 0;

	my $mtime_input  = get_mtime_of_dir "$INPUT_DIR/$dashboardname";
	my $mtime_output = get_mtime_of_dir "$OUTPUT_DIR/$dashboardname";

	next if defined $mtime_input && defined $mtime_output && $mtime_input < $mtime_output;

	unless( -d "$OUTPUT_DIR/$dashboardname" ){
		mkdir "$OUTPUT_DIR/$dashboardname" or do {
			die "$OUTPUT_DIR/$dashboardname: cannot create, stopped";
		};
	}

	opendir my $i, "$INPUT_DIR/$dashboardname" or do {
		die "$INPUT_DIR/$dashboardname: cannot open, stopped";
	};
	foreach my $panelblockfile ( sort readdir $i ){
		next if $panelblockfile =~ m"^\.";
		next unless $panelblockfile =~ m"^(.*)\.json$";
		my $panelblockname = $1;

		# read panel json
		open my $j, "<", "$INPUT_DIR/$dashboardname/$panelblockfile" or do {
			die "$INPUT_DIR/$dashboardname/$panelblockfile: cannot open, stopped";
		};
		my $json;
		while( <$j> ){
			next if m"^\s*(#|$)";
			$json .= $_;
		}
		close $j;
		my $obj = eval { $codec->decode( $json ); };
		if( $@ ){
			die "$INPUT_DIR/$dashboardname/$panelblockfile: invalid JSON format, stopped";
		}

		# read field keys used in the panels
		my %fieldkeys;
		open my $j, "<", "$INPUT_DIR/$dashboardname/$panelblockname.fieldkeys" or do {
			die "$INPUT_DIR/$dashboardname/$panelblockname.fieldkeys: cannot open, stopped";
		};
		while( <$j> ){ $fieldkeys{$_} = 1; }
		close $j;
		my $obj = eval { $codec->decode( $json ); };
		if( $@ ){
			die "$INPUT_DIR/$dashboardname/$panelblockfile: invalid JSON format, stopped";
		}

		# validate id and gridPos in the panels
		my ($panelblock_height, $panelblock_lastserial, $panelblock_serials) =
	       		calculate_height_and_serial $panel_abs_y, $panel_serial, @$obj;
		$panel_abs_y += $panelblock_height;
		$panel_serial = $panelblock_lastserial;

		my $panelblock_fieldkeys = join "", sort keys %fieldkeys;
		my $panelblock_json = $codec->encode($obj) . "\n";

		# write panels, field keys
		write_if_changed "$OUTPUT_DIR/$dashboardname/$panelblockname.serials",   $panelblock_serials;
		write_if_changed "$OUTPUT_DIR/$dashboardname/$panelblockname.fieldkeys", $panelblock_fieldkeys;
		write_if_changed "$OUTPUT_DIR/$dashboardname/$panelblockname.json",      $panelblock_json;
	}
	close $i;
}
close $h;

opendir my $h, $OUTPUT_DIR or do {
	die "$OUTPUT_DIR: cannot open, stopped";
};
foreach my $dashboardname ( sort readdir $h ){
	next if $dashboardname =~ m"^\.";

	unless( -d "$INPUT_DIR/$dashboardname" ){
		rmtree "$OUTPUT_DIR/$dashboardname" or do {
			die "$OUTPUT_DIR/$dashboardname: cannot create, stopped";
		};
		next;
	}

	opendir my $i, "$OUTPUT_DIR/$dashboardname" or do {
		die "$OUTPUT_DIR/$dashboardname: cannot open, stopped";
	};
	foreach my $panelblockfile ( sort readdir $i ){
		next if $panelblockfile =~ m"^\.";
		next unless $panelblockfile =~ m"^(.*)\.json$";
		my $panelblockname = $1;

		next if -f "$INPUT_DIR/$dashboardname/$panelblockname.json";

		unlink "$OUTPUT_DIR/$dashboardname/$panelblockname.json";
		unlink "$OUTPUT_DIR/$dashboardname/$panelblockname.serials";
		unlink "$OUTPUT_DIR/$dashboardname/$panelblockname.fieldkeys";
	}
}
close $h;

exit 0;

